Pojem pocitac
Naco nam je pocitac
Historia pocitac
Historia programovania a jazykov
Jazyky zrozumitelnejsie ludom
Nizsie jazyky vs vyssie jazyky
Instrukcia - mikroprogram
Formalny jazyk
Softver
- monolit
- komunikacia so zdrojmi udajov
- zdroje udajov
- komunikacia medzi modulmi aplikacie
- zlozitost problemu
- clean code
- spagety code
- pamat
- obmedzene zdroje
- jedno vlakno, multithreading vs paralelny beh, distribuovany beh
- process
- fiber
- blocking vs non blocking
- mutability
- funkcionalne programovanie
- objektove programovanie
- architektury
- abstrakcie na roznych urovnach navrhu
- komunikacia medzi vrstvami
- zodpovednost vrstvy
- principy
- patterny
- co urcite treba vediet
- virtualny nie je vzdy zvlastny
- kvantove pocitace
- potlacanie kvantovych javou
- graficka karta dokaze pocitat
- rozne druhy paralelizmu
- softver kolko stoji a preco
- testing kolko ho treba a aky test na co pouzit
- dobry programator
- pamataj princip, pattern, ... nie technologiu
- viac procesorov co to bude
- data su problem , DNA ako ulozisko
- ako to v skutocnosti programujeme ( rychlost , komunikacia ... )
- programovanie kedysi a dnes
- dalsie paradigmy
- a co mobil ?
- Virtualny stroj
- klient server
- per to per vyhody nevyhody
- internet vznik ako vyzeral na co sluzit
- web -((-
- reaktivne programovanie
- cloud co to ten oblacik je a ako funguje
- zalohovat treba ale ako
- Java nie je len motorka a ako su na tom ine
- Menej je viac
- citatelnost nad vsetko ?
- AI a pisanie kodu
- dependency hell a ine dalsie helly
- velka dependencia kvoli malej funkcionalite ?
- builderi a ako to bolo pred nimi
- najrychlejsi builder
- co s tolkymi virtualnymi masinami, alebo ako orchestrovat virtualiyovane aplikacie
- agile je fragile a dalsie padajuce vody
- manualny testing a testeri
- revision control a vsetko ako zdrojovy kod je cestou
- databazy alebo ako mozem ulozit svoje udaje
- UML podme kreslit a yachztit abstrakcie
- HTML nie je programovanie
- SQL nie je programovanie
-
